#!/bin/zsh


set -u
set -o pipefail

readonly ESC="$(tput sgr0)"
readonly BOLD="$(tput bold)"
readonly GREEN="$(tput setaf 2)"
readonly RED="$(tput setaf 1)"
readonly BLUE="$(tput setaf 4)"

# Script to perform installation of nix-darwin on MacOS
#

{ # Prevent execution if this script was only partially downloaded
function print_arrow () {
    printf "${BOLD}${GREEN}"
    eval $(echo printf '"=%.0s"' {1..$SHLVL})
    printf "> $*${ESC}\n"
}

oops() {
    echo "$0:" "$@" >&2
    exit 1
}

umask 0022

# Perform automated install
darwintmpDir="$(mktemp -d -t darwinautoinstalldir.XXXXXXXXX || \
          oops "Can't create temporary directory for downloading the nix-darwin install script")"

cleanup() {
    rm -rf "$darwintmpDir"
}
trap cleanup EXIT INT QUIT TERM

## Test to confirm nix has been installed
if [[ ! $(mount | grep -w "/nix") ]]; then
    printf "${BOLD}${RED}Error: Nix has not yet been installed - darwin-autoinstall script cannot be executed${ESC}\n"
    exit 1
fi

## Test to confirm nix-darwin has NOT yet been installed
if [[ $(darwin-version --version 2>/dev/null) ]]; then
    printf "${BOLD}${RED}nix-darwin already installed${ESC}\n"
    exit 1
elif [[ ! $(nix --version 2>/dev/null) ]]; then
    ## Executed the startup scripts to ensure nix path is present
    . /etc/zprofile
    . /etc/zshrc
fi

print_arrow "Downloading nix-darwin"
pushd $darwintmpDir
nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer

print_arrow "Starting a new sub-shell to configure nix-darwin"

# Trick to export print_arrow function to zsh sub-shell
func_print_arrow="$(typeset -f print_arrow)"
export func_print_arrow ESC BOLD RED GREEN BLUE
zsh -l <<EOF

eval "\$func_print_arrow"

print_arrow "Executing nix-darwin installer"
yes | $darwintmpDir/result/bin/darwin-installer

. /etc/zshenv
. /etc/zprofile
. /etc/zshrc

print_arrow "Configuring nix-darwin"

nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.05.tar.gz home-manager
nix-channel --update
darwin-rebuild switch -I darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix
EOF


print_arrow "Starting a new sub-shell to install tmux plug-ins"

zsh -l <<EOF

eval "\$func_print_arrow"

. /etc/zshenv
. /etc/zprofile
. /etc/zshrc

## Note that ~/.config/tmux/tmux.conf was already linked via dostow.sh earlier in 
#  clonerepo-autoinstall
git clone https://github.com/tmux-plugins/tpm.git ~/.tmux/plugins/tpm
tmux -c "~/.tmux/plugins/tpm/bindings/install_plugins" 2>/dev/null

EOF

popd

printf "${BOLD}${BLUE}Restart a new terminal to start using Nix and nix-darwin${ESC}\n"

} # End of wrapping

