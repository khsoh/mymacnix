#!/bin/zsh



set -u
set -o pipefail

readonly ESC="$(tput sgr0)"
readonly BOLD="$(tput bold)"
readonly GREEN="$(tput setaf 2)"
readonly RED="$(tput setaf 1)"

declare -A hmlinked
for i in ~/Applications/Home\ Manager\ Apps/*; do
  dest="$(readlink "$i")"
  hmlinked[$dest]="1"
done

printf "${BOLD}${GREEN}Updating nix-darwin...${ESC}\n"
printf "${BOLD}${RED}Starting to update channels:\n$(sudo HOME=/var/root nix-channel --list)${ESC}\n"
sudo HOME=/var/root nix-channel --update --verbose
printf "${BOLD}${GREEN}Completed updating channels:\n$(sudo HOME=/var/root nix-channel --list)${ESC}\n\n\n"
sleep 3

printf "${BOLD}${RED}Starting to update channels:\n$(nix-channel --list)${ESC}\n"
nix-channel --update --verbose
printf "${BOLD}${GREEN}Completed updating channels:\n$(nix-channel --list)${ESC}\n\n\n"
sleep 3

LAST_GOOD_REV=$(tail -1 ~/.working-nixpkgs || echo 0)
LATEST_NIXPKGS_REV=$(NIX_PATH=nixpkgs=channel:nixpkgs-unstable nix-instantiate --eval --expr "(import <nixpkgs> {}).lib.version"|sed -e 's/"//g' -e 's/.*\.//')
BUILDARGS=""
BUILDREV="$LATEST_NIXPKGS_REV"
if grep -q "^$LATEST_NIXPKGS_REV$" ~/.nonworking-nixpkgs; then
    if [ "$LAST_GOOD_REV" = "0" ]; then
        OPTIONS="[l/x]"
    else
        OPTIONS="[l/g/x]"
    fi
    echo "nixpkgs rev $LATEST_NIXPKGS_REV failed to build previously"
    echo "What would you like to build? $OPTIONS"
    echo " l/L - Latest nixpkgs rev"
    if [ "$LAST_GOOD_REV" != "0" ]; then
        echo " g/G - Last good rev"
    fi
    echo " x/X - Exit"
    echo -n "$OPTIONS "
    read -k 1 i
    case "$i" in
        l|L)
            ;;
        g|G)
            if [ "$LAST_GOOD_REV" = "0" ]; then
                exit 0
            fi
            BUILDARGS="-I nixpkgs=https://github.com/NixOS/nixpkgs/archive/${LAST_GOOD_REV}.tar.gz"
            BUILDREV="$LAST_GOOD_REV"
            ;;
        *)
            exit 0
            ;;
    esac
fi

printf "${BOLD}${RED}Starting to rebuild system${ESC}\n"
sudo darwin-rebuild switch --option allow-unsafe-native-code-during-evaluation true --verbose $(echo $BUILDARGS)
BUILDRESULT=$?

if [ "$BUILDRESULT" = "0" ]; then
    grep -q "^$BUILDREV$" ~/.working-nixpkgs || echo $BUILDREV >> ~/.working-nixpkgs
    if grep -q "^$BUILDREV$" ~/.nonworking-nixpkgs ; then
        grep -v "^$BUILDREV$" ~/.nonworking-nixpkgs > ~/.xnonworking-nixpkgs
        mv -f ~/.xnonworking-nixpkgs ~/.nonworking-nixpkgs
    fi
else
    grep -q "^$BUILDREV$" ~/.nonworking-nixpkgs || echo $BUILDREV >> ~/.nonworking-nixpkgs
fi
printf "${BOLD}${GREEN}Completed rebuilding system${ESC}\n"

declare -A linked
for i in ~/Applications/Home\ Manager\ Apps/*; do
    dest="$(readlink "$i")"
    linked[$dest]="1"
    if [[ ! -n ${hmlinked[$dest]+1} ]]; then
        printf "${BOLD}${RED}!!!! $dest is new${ESC}"
        dorebuild=1
    fi
done

printf "${BOLD}${GREEN}old keys in hmapps: ${${(@k)hmlinked}/ /\n}${ESC}"
printf "${BOLD}${GREEN}new keys in hmapps: ${${(@k)linked}/ /\n}${ESC}"

if [[ ! -n "${dorebuild+1}" ]]; then
    printf "All application links are up-to-date - no need to rebuild"
    exit 0
fi

printf "${BOLD}${RED}Need to rebuild${ESC}"

existingPaths="$(/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump | grep -e "path: */nix/" | sed -E 's/.*(\/nix\/.*) \(0x[0-9a-f]+\)/\1/')"

unregistered="0"
IFS=$'\n'
arr=( $(echo $existingPaths) )
for i in $arr; do
  if [[ -v hmlinked[$i] && "${hmlinked[$i]}" = "1" ]]; then
    printf "Unregistering $i"
    "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister" -u "$i"
    unregistered="1"
  fi
done

if [ "$unregistered" = "1" ]; then
  printf "Redoing darwin-rebuild to update launchpad links..."
  find 2>/dev/null /private/var/folders/ -type d -name com.apple.dock.launchpad -exec rm -rf {} +; killall Dock
  sudo darwin-rebuild switch --option allow-unsafe-native-code-during-evaluation true
fi

