{ config, pkgs, lib, ... }: 
let
  usersys = import ./usersys.nix;
  USER = usersys.USER;
  HOME = usersys.HOME;
  SYSPATH = usersys.NIXSYSPATH;
  DOTFILEPATH = ../dotfiles;
  gh_noreply_email = usersys.gh_noreply_email;
  ssh_user_pubkey = usersys.ssh_user_pubkey;
  nixid_pubkey = usersys.nixid_pubkey;

  # Test if environment has installed 1Password - this affects SSH-related setup
  SSHSIGN_PROGRAM = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign";
  _has_1password_ = builtins.pathExists SSHSIGN_PROGRAM;

  has_1password = lib.trivial.warnIfNot _has_1password_
    ''
      Best to install 1Password App first before deploying the Nix configuration.
      Will use nixid_ed25519 as the user SSH key for GIT signing
    '' _has_1password_;

  # Function to the functionality of GNU Stow by generating
  #   links suitable for home.file .  The target are 
  #   linked to files in the /nix/store
  # Both srcpath and targetpath must be path variables
  # The files in srcpath are copied into /nix/store before the link is generated 
  #   - hence the targets are immutable
  stow_hf = (srcpath: targetpathstr:
    builtins.mapAttrs (name: value: {
      enable = true;
      source = lib.path.append srcpath name;
      target = targetpathstr + "/" + name;
    }) (builtins.readDir srcpath)
  );

in {
  ## Need to install nerdfonts here instead of nix-darwin's users.users
  ## because nix-darwin did not link the fonts to ~/Library/Fonts folder
  home.packages = with pkgs;
  [ 
    (nerdfonts.override { fonts = [ "FiraMono" ]; })
  ];

  ### Generate the home.file for the dotfiles
  home.file = stow_hf DOTFILEPATH ".";

  ### Enable git configuration
  programs.git = {
    enable = true;
    userName = "K H Soh";

    aliases = {
      co = "checkout";
      ci = "commit";
      br = "branch";
      st = "status";
      unstage = "reset HEAD --";
      last = "log -1 HEAD";
    };

    includes = [
      { ### The following allows user to specify their config file that contains private
        #   information (like email) that they may not want to place in a public repo
        path = "~/.config/git/config-private";
      }

      #### The following specify noreply email for github repos
      {
        condition = "hasconfig:remote.*.url:git@github.com:*/**";
        contents = {
          user = { email = gh_noreply_email; };
        };
      }
      {
        condition = "hasconfig:remote.*.url:https://github.com/**";
        contents = {
          user = { email = gh_noreply_email; };
        };
      }
      {
        condition = "hasconfig:remote.*.url:https://*@github.com/**";
        contents = {
          user = { email = gh_noreply_email; };
        };
      }
    ];

    lfs = { enable = true; };
    ##### THE FOLLOWING IS GENERATED BY lfs.enable = true
    # [filter "lfs"]
    #    clean = "git-lfs clean -- %f"
    #    process = "git-lfs filter-process"
    #    smudge = "git-lfs smudge -- %f"
    #    required = true

    extraConfig = {
      ### The following are needed because home-manager's gpg/signing module
      #  does not support ssh
      user = { signingkey = if has_1password then ssh_user_pubkey else nixid_pubkey; };
      gpg = {
        format = "ssh";
        ssh = if has_1password then {
          program = SSHSIGN_PROGRAM;
        } else {} ;
      };
      commit = { gpgsign = true; };
      tag = { gpgsign = true; };

      rerere = { enabled = true; };
      rebase = { updateRefs = true; };
    };

  };

  launchd.enable = true;
  launchd.agents = {
    updateTmuxPlugins = {
      enable = true;
      config = {
        Label = "updateTmuxPlugins";
        ProgramArguments = [ "${SYSPATH}/bash"
          "-l"
          "-c"
          "[ -d ${HOME}/.tmux/plugins/tpm ] || ${SYSPATH}/git clone https://github.com/tmux-plugins/tpm.git ${HOME}/.tmux/plugins/tpm 
           &gt;&amp;2 ${SYSPATH}/tmux -c \"${HOME}/.tmux/plugins/tpm/bin/install_plugins\"
           &gt;&amp;2 ${SYSPATH}/tmux -c \"${HOME}/.tmux/plugins/tpm/bin/update_plugins all\"
           &gt;&amp;2 ${SYSPATH}/tmux -c \"${HOME}/.tmux/plugins/tpm/bin/clean_plugins\"
           &gt;&amp;2 echo \"Completed TPM plugin updates\"
          "];
        RunAtLoad = true;
        KeepAlive = { SuccessfulExit = false; };
        StandardOutputPath = "${HOME}/log/tmuxupdate.log";
        StandardErrorPath = "${HOME}/log/tmuxupdateError.log";
      };
    };
    updateNvimPlugins = {
      enable = true;
      config = {
        Label = "updateNvimPlugins";
        ProgramArguments = [ "${SYSPATH}/bash"
          "-l"
          "-c"
          "${SYSPATH}/nvim --headless \"+Lazy! sync\" \"+MasonUpdate\" \"+MasonToolsUpdateSync\" \"+qa\" "
          ];
        RunAtLoad = true;
        KeepAlive = { SuccessfulExit = false; };
        StandardOutputPath = "${HOME}/log/nvimupdate.log";
        StandardErrorPath = "${HOME}/log/nvimupdateError.log";
      };
    };

  };

  # The state version is required and should stay at the version you
  # originally installed.
  home.stateVersion = "24.11";
}

