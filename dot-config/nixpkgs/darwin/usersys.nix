{ lib, ... }:
let
  _HOMENIX = ./home.nix;
  _USER = builtins.getEnv "USER";
  _HOME = builtins.getEnv "HOME";

  # github no reply email
  _gh_noreply_email = "2169449+khsoh@users.noreply.github.com";

  _NIXSYSPATH = "/run/current-system/sw/bin";

  ## SSH private and public keys for the user and Nix
  _NIXIDPKFILE = _HOME + "/.ssh/nixid_ed25519";
  _NIXIDPUBFILE = _NIXIDPKFILE + ".pub";
  _USERPKFILE = _HOME + "/.ssh/id_ed25519";
  _USERPUBFILE = _USERPKFILE + ".pub";

  # It is possible to build system without a user private keyfile.
  # This is to build for systems running on a VM - so that the
  # chance of leaking the private key is minimized
  have_userpkfile = builtins.pathExists _USERPKFILE;

###### THE FOLLOWING WITHIN THE 'in' block ARE AUTOGENERATED FROM 
###### THE ASSIGNMENTS ABOVE.
###### DO NOT MODIFY - JUST CHANGE THE ASSIGNMENTS ABOVE
in with lib; {
  USER = _USER;
  HOME = _HOME;
  HOMENIX = (trivial.throwIfNot (builtins.pathExists _HOMENIX) ''
  ${_HOMENIX} file must be present to build the configuration
  '') _HOMENIX;

  NIXSYSPATH = _NIXSYSPATH;

  # github no reply email
  gh_noreply_email = _gh_noreply_email;

  ##### SSH related stuff #####

  ## The configuration only builds if the following files exists:
  # - nixid secret and public key files
  # - user public key file
  NIXIDPKFILE = (trivial.throwIfNot (builtins.pathExists _NIXIDPKFILE) ''
    The NIXID ${_NIXIDPKFILE} ssh private key file is absent - this file must be present to build
    '') _NIXIDPKFILE; 
  NIXIDPUBFILE = (trivial.throwIfNot (builtins.pathExists _NIXIDPUBFILE) ''
    The NIXID ${_NIXIDPUBFILE} ssh public key file is absent - this file must be present to build
    '') _NIXIDPUBFILE;

  USERPKFILE = _USERPKFILE;
  USERPUBFILE = (trivial.throwIfNot (builtins.pathExists _USERPUBFILE) ''
  The user ${_USERPUBFILE} ssh public key file is absent - this file must be present to build
  '') _USERPUBFILE;

  DEFAULT_PKFILE = if have_userpkfile then _USERPKFILE else _NIXIDPKFILE;

  # SSH public keys - nixid_pubkey is used for testing in my VM environment
  #   - this is useful for testing in case we accidentally leak SSH key from test environment
  ssh_user_pubkey = builtins.concatStringsSep " " 
      (lists.take 2 (builtins.filter (e: !(builtins.isList e)) 
        (builtins.split "[[:space:]\n]+" (builtins.readFile _USERPUBFILE))));
  nixid_pubkey = builtins.concatStringsSep " " 
      (lists.take 2 (builtins.filter (e: !(builtins.isList e)) 
        (builtins.split "[[:space:]\n]+" (builtins.readFile _NIXIDPUBFILE))));
  ##### End of SSH related stuff #####
}
