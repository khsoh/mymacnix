# Reduce mode switching delay.
KEYTIMEOUT=5

nixclean () {
    DDAYS=${1:-20d}
    echo "$(tput setaf 9)Performing garbage collection on Nix store objects older than ${DDAYS%d} days${reset_color}"
    nix-store --gc
    sudo -i nix-collect-garbage --delete-older-than ${DDAYS}
}

tmux () {
    [ -x ~/.config/tmux/setup_terminal_font.zsh ] && ~/.config/tmux/setup_terminal_font.zsh
    if [[ -z ${1+x} ]]; then
        resize_app
        /run/current-system/sw/bin/tmux new-session -A
    else
        /run/current-system/sw/bin/tmux $@
    fi
}

## Resizes the app window
# By default, if no arguments given, it resizes app "Terminal" in main display
# to half-width and full-height
# Otherwise, the 3 arguments are the app name, fractional width and height of the main
# display.
resize_app() {
    APP=${1:-"Terminal"}
    XFRACTION=${2:-0.5}
    YFRACTION=${3:-1}

    ## Get the main display resolution
    NIXRUNPATH=/run/current-system/sw/bin
    JQ=$NIXRUNPATH/jq
    SED=$NIXRUNPATH/sed
    TOPLEFTX=0
    TOPLEFTY=0
    DISPJS=$(system_profiler SPDisplaysDataType -json|$JQ '.SPDisplaysDataType')
    if [[ $(echo $DISPJS|$JQ 'length') -gt 0 ]]; then
        eval $(echo $DISPJS | $JQ '.[0].spdisplays_ndrvs.[] | select (.spdisplays_main == "spdisplays_yes") | ._spdisplays_resolution' | $SED -rn 's/"([0-9]+)\s*x\s*([0-9]+).*$/BOTRIGHTX=\1;BOTRIGHTY=\2/p')

        ## Compute the coordinates to position the terminal window in the main display.
        ## So, this works properly even in a multi-monitor setup.

        osascript <<-EOF
            use framework "Foundation"
            use framework "AppKit"
            use scripting additions

            set theMenuBarHeight to current application's NSMenu's menuBarHeight() as integer
            tell application "System Events"
                set found to false
                repeat with theProcess in (processes where name is "$APP")
                    set theProcess to theProcess
                    set found to true
                    exit repeat
                end repeat
                if not found then
                    return
                end if

                tell theProcess to set theWindow to first item of windows
                set toplefty to (theMenuBarHeight + 1 + $TOPLEFTY) as integer
                set botrx to ($BOTRIGHTX * $XFRACTION) as integer
                set botry to ($BOTRIGHTY * $YFRACTION) as integer
                set position of theWindow to { $TOPLEFTX, toplefty }
                set size of theWindow to { botrx, botry }

            end tell
            return
EOF
    else
        ## The following code is needed for VM installation because
        ## SPDisplaysDataType is absent from system_profiler for VMs
        osascript <<-EOF
            tell application "Finder" to set terminalSize to bounds of window of desktop

            tell application "System Events"
                set found to false
                repeat with theProcess in (processes where name is "$APP")
                    set theProcess to theProcess
                    set found to true
                    exit repeat
                end repeat
                if not found then
                    return
                end if

                tell theProcess to set theWindow to first item of windows

                set topleftx to item 1 of terminalSize
                set toplefty to (item 2 of terminalSize + 1 + $TOPLEFTY) as integer
                set botrx to (item 3 of terminalSize * $XFRACTION) as integer
                set botry to (item 4 of terminalSize * $YFRACTION) as integer
                set position of theWindow to { topleftx, toplefty }
                set size of theWindow to { botrx, botry }
            end tell
            return
EOF
    fi
}

delagent () {
    if [ -z ${1+x} ]; then
        echo "Usage: delagent <service-target>" >&2
        return 1
    fi
    launchctl bootout gui/$UID/$1
}

# Change cursor shape for different vi modes.
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] ||
       [[ $1 = 'block' ]]; then
        echo -ne '\e[1 q'

    elif [[ ${KEYMAP} == main ]] ||
         [[ ${KEYMAP} == viins ]] ||
         [[ ${KEYMAP} = '' ]] ||
         [[ $1 = 'beam' ]]; then
      echo -ne '\e[5 q'
    fi
}
zle -N zle-keymap-select

# Use beam shape cursor on startup.
echo -ne '\e[5 q'

# Use beam shape cursor for each new prompt.
preexec() {
    echo -ne '\e[5 q'
}

_fix_cursor() {
    echo -ne '\e[5 q'
}

precmd_functions+=(_fix_cursor)
